{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GiftExpetApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","length","categories","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","response","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","key","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"6MAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACZC,mBAAS,IADG,mBACzCC,EADyC,KAC7BC,EAD6B,KAehD,OACE,0BAAMC,SATa,SAACC,GACpBA,EAAEC,iBACEJ,EAAWK,OAAS,IACtBP,GAAc,SAACQ,GAAD,OAAiBN,GAAjB,mBAAgCM,OAC9CL,EAAc,OAMZ,2BACEM,KAAK,OACLC,MAAOR,EACPS,SAjBa,SAACN,GACpBF,EAAcE,EAAEO,OAAOF,Y,uBCPdG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,4DACN,mCACTC,EAFe,iDAEiCC,UAAUH,GAF3C,6BACN,oCADM,SAGEI,MAAMF,GAHR,cAGfG,EAHe,gBAIEA,EAASC,OAJX,uBAIbC,EAJa,EAIbA,KACFC,EAAOD,EAAKE,KAAI,SAACC,GAAD,MAAU,CAC9BC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QARd,kBAWdM,GAXc,4CAAH,sDCEPO,EAAc,SAAC,GAAmB,IAAjBH,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IACnC,OACE,yBAAKc,UAAU,0CACb,2BAAIJ,GACJ,yBAAKK,IAAKf,EAAKgB,IAAKN,MCFbO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECDb,SAACA,GAAc,IAAD,EACdb,mBAAS,CAAEoB,KAAM,GAAIa,SAAS,IADhB,mBACjCC,EADiC,KAC1BC,EAD0B,KASxC,OANAC,qBAAU,WACRxB,EAAQC,GAAUwB,MAChB,SAACX,GAAD,OAAYS,EAAS,CAAEf,KAAMM,EAAQO,SAAS,SAE/C,CAACpB,IAEGqB,EDP2BI,CAAazB,GAAjCa,EADyB,EAC/BN,KAAca,EADiB,EACjBA,QAEtB,OACE,oCACE,wBAAIJ,UAAU,qCAAsChB,GAElDoB,GAAW,uBAAGJ,UAAU,oCAAb,WAEb,yBAAKA,UAAU,aAEXH,EAAOJ,KAAI,SAACC,GAAD,OACT,kBAAC,EAAD,eACEgB,IAAMhB,EAAIC,IACLD,UEdNiB,EAAe,WAAO,IAAD,EACIxC,mBAAS,IADb,mBACzBO,EADyB,KACbR,EADa,KAGhC,OACE,oCACE,4CACA,kBAAC,EAAD,CAAaA,cAAgBA,IAC7B,6BACA,4BAEIQ,EAAWe,KAAI,SAACT,GAAD,OACb,kBAAC,EAAD,CACEA,SAAWA,EACX0B,IAAM1B,UCXpB4B,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.9df32132.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\n\nexport const AddCategory = ({ setCategories }) => {\n  const [inputValue, setInputValue] = useState('')\n\n  const handleChange = (e) => {\n    setInputValue(e.target.value)\n  }\n\n  const handleSubmit = (e) => {\n    e.preventDefault()\n    if (inputValue.length > 2) {\n      setCategories((categories) => [inputValue, ...categories])\n      setInputValue('')\n    }\n  }\n\n  return (\n    <form onSubmit={ handleSubmit }>\n        <input\n          type=\"text\"\n          value={inputValue}\n          onChange={handleChange}\n        />      \n    </form>\n  )\n}\n\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired\n}","export const getGifs = async (category) => {\n  const apiKey = 'SSAiCGTiMvEk5w0u73YjsvjGeh16R7hY'\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=${apiKey}`\n  const response = await fetch(url)\n  const { data } = await response.json()\n  const gifs = data.map((img) => ({\n    id: img.id,\n    title: img.title,\n    url: img.images.downsized_medium.url\n  }))\n\n  return gifs\n}","import React from 'react'\n\nexport const GifGridItem = ({ title, url}) => {\n  return (\n    <div className=\"card animate__animated animate__fadeIn\">\n      <p>{title}</p>\n      <img src={url} alt={title} />\n    </div>\n  );\n}\n","import React from 'react';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GifGridItem } from './GifGridItem'\n\nexport const GifGrid = ({ category }) => {\n  const { data: images, loading } = useFetchGifs(category)\n  \n  return (\n    <>\n      <h3 className=\"animate__animated animate__fadeIn\">{ category }</h3>\n\n      { loading && <p className=\"animate__animated animate__flash\">Loading</p> }\n      \n      <div className=\"card-grid\">\n        {\n          images.map((img) => (\n            <GifGridItem \n              key={ img.id } \n              { ...img } \n            />\n          ))\n        }\n      </div>\n    </>\n  );\n}\n","import { useState, useEffect } from \"react\"\nimport { getGifs } from \"../helpers/getGifs\"\n\nexport const useFetchGifs = (category) => {\n  const [state, setState] = useState({ data: [], loading: true })\n\n  useEffect(() => {\n    getGifs(category).then(\n      (images) => setState({ data: images, loading: false })\n    )\n  }, [category])\n\n  return state;\n}","import React, { useState } from 'react'\nimport {AddCategory} from './components/AddCategory'\nimport { GifGrid } from './components/GifGrid'\n\nexport const GifExpertApp = () => {\n  const [categories, setCategories] = useState([])\n\n  return (\n    <>\n      <h2>GifExpertApp</h2>\n      <AddCategory setCategories={ setCategories }/>\n      <hr/>\n      <ol>\n        {\n          categories.map((category) => (\n            <GifGrid\n              category={ category }\n              key={ category }\n            />\n          ))\n        }\n      </ol>\n    </>\n  )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { GifExpertApp } from './GiftExpetApp';\n\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}